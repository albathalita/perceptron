# -*- coding: utf-8 -*-
"""Perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Pe3H_fJKpemQDLaeIfqM2QUjNV57Eo4

Verificar se o ser vivo é quadrúpede ou bípede.

- Qudrúpede = 1
- Bípede = -1
- Pesos = [0, 0, 0, 0]
- θ = 1
- Taxa de aprendizagem = 1

Fonte: [Perceptrons](https://www.dca.ufrn.br/~lmarcos/courses/robotica/notes/perceptrons.pdf)
"""

import numpy as np

# Dados iniciais
# Base de dados

# Classe 1 = Quadrúpede
Cao = np.array([1, -1, 1, 1])
# Classe -1 = Bípede
Homem = np.array([-1, -1, -1, 1])

# Pesos iniciais
Pesos = np.array([0, 0, 0, 0])

# Taxa de aprendizagem
eta = 1

# Viés
bias = 1

# Funções para a soma ponderada
# u = x0*w0 +  x1*w1 + x2*w2 -1*θ 
# m = x0*w0 +  x1*w1 + x2*w2
# u = m -1*θ

def somaPonderada(x,w):
  bias = 1
  m = np.multiply(x,w)
  u = np.sum(m) -1*bias
  return u

# Função de ativação
# Função degrau

def funcaoAtivacao(u):
  if u >= 0:
    return 1
  else:
    return -1

# Função de saída

def saida(x,w):
  u= somaPonderada(x,w)
  return funcaoAtivacao(u)

# Função para ajustes dos pesos
# Parte cententral do processo de aprendizagem 
# novo wi  →  wi = wi +  η xi (d - y ) 

def ajustaPesos(eta, w, x, bias, d, y):
  e = d-y
  novoW = w + (eta*x*e)
  novoB = bias + (eta*(-1)*e)
  return novoW, novoB

"""# Treinamento 
* Realizado manualmente para ilustrar o processo 
* Aprsenta uma entrada e calcula a saída de maneira iterativa

## Iteração 1
"""

# Entrada Cao saída +1
d = 1 
y = saida(Cao,Pesos) 
print('Saída = ',y)
# Ajuste dos pesos 
Pesos,bias = ajustaPesos(eta,Pesos,Cao,bias,d,y) 
print('Pesos = ',Pesos)
print('Bias = ',bias) 

print(f'\n')

# Entrada Homem saída -1
d = -1 
y = saida(Homem,Pesos) 
print('Saída = ',y)
# Ajuste dos pesos 
Pesos,bias = ajustaPesos(eta,Pesos,Homem,bias,d,y) 
print('Pesos = ',Pesos)
print('Bias = ',bias)

"""## Iteração 2"""

# Entrada Cao saída +1
d = 1 
y = saida(Cao,Pesos) 
print('Saída = ',y)
# Ajuste dos pesos 
Pesos,bias = ajustaPesos(eta,Pesos,Cao,bias,d,y) 
print('Pesos = ',Pesos)
print('Bias = ',bias) 

print(f'\n')

# Entrada Homem saída -1
d = -1 
y = saida(Homem,Pesos) 
print('Saída = ',y)
# Ajuste dos pesos 
Pesos,bias = ajustaPesos(eta,Pesos,Homem,bias,d,y) 
print('Pesos = ',Pesos)
print('Bias = ',bias)

"""## Teste

* A que classe pertencem os padrões Gato, Cavalo, Galinha e Avestruz?
"""

# Padrão Gato
nome = 'Gato'
T = np.array([1, 1, 1, 1]) 
print("Saida para ",nome," é ", saida(T,Pesos))
print(f'Pesos: {Pesos}')
print(f'Bias: {bias}')

# Padrão Cavalo
nome = 'Cavalo'
T = np.array([1, 1, -1, 1]) 
print("Saida para ",nome," é ", saida(T,Pesos))
print(f'Pesos: {Pesos}')
print(f'Bias: {bias}')

# Padrão Galinha
nome = 'Galinha'
T = np.array([-1, 1, -1, 1]) 
print("Saida para ",nome," é ", saida(T,Pesos))
print(f'Pesos: {Pesos}')
print(f'Bias: {bias}')

# Padrão Avestruz
nome = 'Avestruz'
T = np.array([1, 1, -1, 1]) 
print("Saida para ",nome," é ", saida(T,Pesos))
print(f'Pesos: {Pesos}')
print(f'Bias: {bias}')